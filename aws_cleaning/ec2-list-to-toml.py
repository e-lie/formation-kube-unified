#!/usr/bin/env python3
"""
Script pour lister les instances EC2 par r√©gion et exporter en TOML
Utilise AWS CLI au lieu de boto3
"""

import subprocess
import json
import sys
import argparse
from datetime import datetime
import toml

def run_aws_command(command):
    """Ex√©cute une commande AWS CLI et retourne le r√©sultat"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True, 
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur AWS CLI: {e}")
        print(f"   Commande: {command}")
        print(f"   Erreur: {e.stderr}")
        return None

def get_regions(profile=None):
    """R√©cup√®re la liste des r√©gions AWS"""
    profile_arg = f"--profile {profile}" if profile else ""
    cmd = f"aws ec2 describe-regions --query 'Regions[].RegionName' --output json {profile_arg}"
    
    result = run_aws_command(cmd)
    if result:
        return json.loads(result)
    return []

def get_instances_in_region(region, profile=None):
    """R√©cup√®re les instances EC2 d'une r√©gion sp√©cifique"""
    profile_arg = f"--profile {profile}" if profile else ""
    
    # Commande simple comme celle qui marche
    cmd = f"aws ec2 describe-instances --region {region} --query 'Reservations[*].Instances[*].InstanceId' --output json {profile_arg}"
    
    result = run_aws_command(cmd)
    if result:
        try:
            instance_ids_raw = json.loads(result)
            
            # Aplatir la liste (cas o√π on a des listes imbriqu√©es)
            instance_ids = []
            for item in instance_ids_raw:
                if isinstance(item, list):
                    instance_ids.extend(item)
                else:
                    instance_ids.append(item)
            
            print(f"    Debug: {len(instance_ids)} IDs trouv√©s dans {region}")
            
            # Si on a des IDs, r√©cup√©rer les d√©tails
            if instance_ids:
                # Simplification : r√©cup√©rer juste √©tat et type, pas les tags compliqu√©s
                query = "Reservations[*].Instances[*].{InstanceId:InstanceId,State:State.Name,InstanceType:InstanceType}"
                details_cmd = f'aws ec2 describe-instances --region {region} --instance-ids {" ".join(instance_ids)} --query "{query}" --output json {profile_arg}'
                
                details_result = run_aws_command(details_cmd)
                if details_result:
                    detailed_instances_raw = json.loads(details_result)
                    
                    # Aplatir la structure imbriqu√©e
                    detailed_instances = []
                    for item in detailed_instances_raw:
                        if isinstance(item, list):
                            detailed_instances.extend(item)
                        else:
                            detailed_instances.append(item)
                    
                    print(f"    Debug: D√©tails r√©cup√©r√©s pour {len(detailed_instances)} instances")
                    
                    # Ajouter un champ Name vide pour chaque instance (on peut l'am√©liorer plus tard)
                    for inst in detailed_instances:
                        if isinstance(inst, dict):
                            inst['Name'] = ""
                    
                    return detailed_instances
                else:
                    # Si on ne peut pas r√©cup√©rer les d√©tails, retourner juste les IDs
                    return [{"InstanceId": iid, "State": "unknown", "InstanceType": "unknown", "Name": ""} for iid in instance_ids]
            return []
        except json.JSONDecodeError as e:
            print(f"    Erreur JSON dans {region}: {e}")
            print(f"    R√©sultat brut: {result}")
            return []
    return []

def format_instance_for_toml(instance):
    """Formate une instance pour l'export TOML"""
    # Nettoyer les valeurs None
    formatted = {}
    for key, value in instance.items():
        if value is not None:
            # Convertir les dates ISO en string lisible
            if key == 'LaunchTime' and isinstance(value, str):
                try:
                    dt = datetime.fromisoformat(value.replace('Z', '+00:00'))
                    formatted[key] = dt.strftime('%Y-%m-%d %H:%M:%S UTC')
                except:
                    formatted[key] = value
            else:
                formatted[key] = value
        else:
            formatted[key] = ""
    
    return formatted

def list_ec2_instances(profile=None, regions=None, output_file=None):
    """Liste toutes les instances EC2 et g√©n√®re un fichier TOML"""
    
    print("üîç R√©cup√©ration des instances EC2...")
    
    # Obtenir les r√©gions √† scanner
    if regions:
        target_regions = regions
    else:
        print("üìç R√©cup√©ration de la liste des r√©gions...")
        target_regions = get_regions(profile)
        if not target_regions:
            print("‚ùå Impossible de r√©cup√©rer les r√©gions")
            return False
    
    # Structure pour le TOML
    toml_data = {
        'metadata': {
            'scan_date': datetime.now().isoformat(),
            'profile': profile if profile else 'default',
            'total_regions_scanned': len(target_regions),
            'regions_scanned': target_regions
        },
        'summary': {
            'total_instances': 0,
            'by_state': {},
            'by_region': {}
        },
        'regions': {}
    }
    
    # Scanner chaque r√©gion
    for region in target_regions:
        print(f"  üìç Scan r√©gion: {region}")
        
        instances = get_instances_in_region(region, profile)
        
        if instances:
            # Version simplifi√©e : juste les IDs et infos essentielles
            instance_list = []
            instance_details = {}
            
            for instance in instances:
                instance_id = instance['InstanceId']
                instance_list.append(instance_id)
                
                # D√©tails minimaux pour chaque instance
                instance_details[instance_id] = {
                    'id': instance_id,
                    'state': instance.get('State', 'unknown'),
                    'type': instance.get('InstanceType', 'unknown'),
                    'name': instance.get('Name', '') or ''
                }
                
                # Mettre √† jour les statistiques
                toml_data['summary']['total_instances'] += 1
                
                state = instance.get('State', 'unknown')
                if state not in toml_data['summary']['by_state']:
                    toml_data['summary']['by_state'][state] = 0
                toml_data['summary']['by_state'][state] += 1
            
            # Structure TOML simplifi√©e
            toml_data['regions'][region] = {
                'instance_count': len(instances),
                'instance_ids': instance_list,  # Liste simple des IDs
                'instances': instance_details   # D√©tails par ID
            }
            toml_data['summary']['by_region'][region] = len(instances)
            
            print(f"    ‚úÖ {len(instances)} instances trouv√©es")
        else:
            print(f"    ‚≠ï Aucune instance")
            toml_data['regions'][region] = {
                'instance_count': 0,
                'instances': {}
            }
            toml_data['summary']['by_region'][region] = 0
    
    # G√©n√©rer le fichier TOML
    if not output_file:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_file = f"ec2_instances_{timestamp}.toml"
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            toml.dump(toml_data, f)
        
        print(f"\n‚úÖ Fichier TOML g√©n√©r√©: {output_file}")
        print(f"üìä R√©sum√©: {toml_data['summary']['total_instances']} instances dans {len(target_regions)} r√©gions")
        
        # Afficher le r√©sum√© par √©tat
        if toml_data['summary']['by_state']:
            print("\nüìà R√©partition par √©tat:")
            for state, count in toml_data['summary']['by_state'].items():
                print(f"  ‚Ä¢ {state}: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'√©criture du fichier TOML: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description='Liste les instances EC2 par r√©gion et exporte en TOML'
    )
    parser.add_argument(
        '--profile',
        help='Profil AWS √† utiliser',
        default=None
    )
    parser.add_argument(
        '--regions',
        nargs='+',
        help='R√©gions sp√©cifiques √† scanner (par d√©faut: toutes)',
        default=None
    )
    parser.add_argument(
        '--output',
        help='Fichier de sortie TOML',
        default=None
    )
    parser.add_argument(
        '--check-cli',
        action='store_true',
        help='V√©rifier la configuration AWS CLI'
    )
    
    args = parser.parse_args()
    
    # V√©rifier la CLI AWS
    if args.check_cli:
        print("üîß V√©rification de la configuration AWS CLI...")
        profile_arg = f"--profile {args.profile}" if args.profile else ""
        identity_cmd = f"aws sts get-caller-identity {profile_arg}"
        result = run_aws_command(identity_cmd)
        
        if result:
            identity = json.loads(result)
            print(f"‚úÖ Connect√© au compte: {identity.get('Account')}")
            print(f"   Utilisateur/R√¥le: {identity.get('Arn')}")
        else:
            print("‚ùå Impossible de v√©rifier l'identit√© AWS")
            sys.exit(1)
    
    # V√©rifier que toml est install√©
    try:
        import toml
    except ImportError:
        print("‚ùå Le module 'toml' n'est pas install√©")
        print("   Installation: pip install toml")
        sys.exit(1)
    
    # Lancer le scan
    success = list_ec2_instances(args.profile, args.regions, args.output)
    
    if not success:
        sys.exit(1)
    
    print("\nüéâ Scan termin√© avec succ√®s!")

if __name__ == '__main__':
    main()